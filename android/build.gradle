buildscript {
    // The Android Gradle plugin is only required when opening the android folder stand-alone.
    // This avoids unnecessary downloads and potential conflicts when the library is included as a
    // module dependency in an application project.
    if (project == rootProject) {
        repositories {
            mavenCentral()
            google()
        }
        def buildGradleVersion = ext.has('buildGradlePluginVersion') ? ext.get('buildGradlePluginVersion') : '4.2.0'

        dependencies {
            classpath "com.android.tools.build:gradle:$buildGradleVersion"
        }
    }
}

apply plugin: 'com.android.library'

def safeExtGet(prop, fallback) {
    rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
}

android {
    compileSdkVersion safeExtGet('compileSdkVersion', 30)

    defaultConfig {
        minSdkVersion safeExtGet('minSdkVersion', 16)
        targetSdkVersion safeExtGet('targetSdkVersion', 28)

        versionCode 2
        versionName "1.1"
    }
    lintOptions {
        warning 'InvalidPackage', 'MissingPermission'
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
    buildTypes {
        release {
            consumerProguardFiles 'proguard-rules.pro'
        }
    }
}

repositories {
    mavenCentral()
    google()
    maven {
        // All of React Native (JS, Obj-C sources, Android binaries) is installed from npm
        url "$rootDir/../node_modules/react-native/android"
    }
    maven { url 'https://developer.huawei.com/repo/' }
}

repositories {
    flatDir {
        dirs 'libs'
    }
}

dependencies {
    api fileTree(dir: 'libs', include: ['*.jar'])
    implementation "com.facebook.react:react-native:${safeExtGet('reactNativeVersion', '+')}"
    implementation "com.android.installreferrer:installreferrer:${safeExtGet('installReferrerVersion', '1.1.2')}"
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.2.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.1'
    def firebaseBomVersion = safeExtGet("firebaseBomVersion", null)
    def firebaseIidVersion = safeExtGet('firebaseIidVersion', null)
    if (firebaseBomVersion) {
        implementation platform("com.google.firebase:firebase-bom:${firebaseBomVersion}")
        implementation "com.google.firebase:firebase-iid"
    } else if(firebaseIidVersion){
        implementation "com.google.firebase:firebase-iid:${firebaseIidVersion}"
    }else{
        def iidVersion = safeExtGet('googlePlayServicesIidVersion', safeExtGet('googlePlayServicesVersion', '17.0.0'))
        implementation "com.google.android.gms:play-services-iid:$iidVersion"
    }

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testImplementation "org.mockito:mockito-core:3.6.28"
    implementation 'com.huawei.hms:push:6.3.0.302'
    implementation 'com.google.code.gson:gson:2.6.2'
    implementation 'commons-codec:commons-codec:1.6'
    implementation 'androidx.annotation:annotation:1.1.0'
    compileOnly files("libs/vivo_pushSDK_v3.0.0.4_484.aar")
    compileOnly files("libs/push-3.0.0.aar")

}

